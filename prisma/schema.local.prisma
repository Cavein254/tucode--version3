// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [id], references: [user_id], onDelete: Cascade)
}

model User {
  user_id       String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  snippets      Snippet[]
  posts         Post[]
  message Message[]  
  answers Answer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  profile_id  String    @id @default(cuid())
  email       String?   @unique(map: "users.email_unique")
  githubUrl   String?   @map(name: "github_url")
  githubImage String?   @map(name: "github_image")
  bio         String    
  createdAt   DateTime? @default(now()) @map(name: "created_at")
  updatedAt   DateTime? @updatedAt @map(name: "updated_at")
  lastSeen    DateTime? @map(name: "last_seen")
}

model Post {
  post_id   String    @id @default(cuid())
  title     String    
  body      String    
  slug      String?   @unique
  views     String?
  likes     String?
  tags      String?
  published Boolean?  @default(false)
  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  author    User?     @relation(fields: [authorId], references: [user_id], onDelete: Cascade)
  authorId  String?
  comments  Comment[]
  answers Answer[]
}

model Answer {
  answer_id String    @id @default(cuid())
  body       String?   
  createdAt  DateTime? @default(now()) @map(name: "created_at")
  updatedAt  DateTime? @updatedAt @map(name: "updated_at")
  author     User      @relation(fields: [authorId], references: [user_id])
  authorId   String
  post      Post      @relation(fields: [postId], references: [post_id])
  postId    String
}

model Snippet {
  snippet_id String    @id @default(cuid())
  title      String    
  slug       String    @unique
  url        String?
  body       String?   
  createdAt  DateTime? @default(now()) @map(name: "created_at")
  updatedAt  DateTime? @updatedAt @map(name: "updated_at")
  published  Boolean?  @default(false)
  author     User      @relation(fields: [authorId], references: [user_id])
  authorId   String
  
}

model Comment {
  comment_id        String    @id @default(cuid())
  body      String    
  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  post      Post      @relation(fields: [postId], references: [post_id])
  author    User      @relation(fields: [authorId], references: [user_id])
  authorId  String
  postId    String
}

model Message {
  message_id        String    @id @default(cuid())
  body      String    
  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  message      User      @relation(fields: [messageId], references: [user_id])
  messageId    String
  ReceiverId  String
  //Todo create a foreignkey weaklink to user as the receiver
  //is also of type user
}