generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [id], references: [user_id], onDelete: Cascade)
}

model User {
  user_id       String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  answers       Answer[]
  comments      Comment[]
  message       Message[]
  posts         Post[]    @relation("writtenposts")
  favoriteposts Post[]    @relation("favoritePosts")
  profile       Profile?
  sessions      Session?
  snippets      Snippet[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  profile_id  String    @id @default(cuid())
  email       String?   @unique(map: "users.email_unique")
  githubUrl   String?   @map("github_url")
  githubImage String?   @map("github_image")
  bio         String
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  lastSeen    DateTime? @map("last_seen")
  profileId   String    @unique
  user        User      @relation(fields: [profileId], references: [user_id])

  @@unique([email, githubUrl])
  @@index([email])
}

model Post {
  post_id       String    @id @default(cuid())
  title         String    @unique @db.VarChar(256)
  body          String
  slug          String    @unique
  levels        level     @default(Beginner)
  types         type?     @default(Learning)
  views         String?
  likes         String?
  tags          String?
  published     Boolean?  @default(false)
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  authorId      String
  favoritedById String?
  answers       Answer[]
  comments      Comment[]
  author        User      @relation("writtenposts", fields: [authorId], references: [user_id], onDelete: Cascade)
  favoritedBy   User?     @relation("favoritePosts", fields: [favoritedById], references: [user_id], onDelete: Cascade)

  @@unique([title, slug])
  @@index([slug])
  @@index([title])
  @@index([authorId])
}

model Answer {
  answer_id String    @id @default(cuid())
  body      String
  likes     String?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  postId    String
  authorId  String
  author    User      @relation(fields: [authorId], references: [user_id])
  post      Post      @relation(fields: [postId], references: [post_id])
}

model Snippet {
  snippet_id String    @id @default(cuid())
  title      String    @db.VarChar(256)
  slug       String    @unique
  url        String?
  body       String?
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  published  Boolean?  @default(false)
  authorId   String
  author     User      @relation(fields: [authorId], references: [user_id])

  @@unique([title, slug])
  @@index([slug])
  @@index([title])
  @@index([authorId])
}

model Comment {
  comment_id String    @id @default(cuid())
  body       String    @db.VarChar(300)
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String
  postId     String
  parentId   String?
  author     User      @relation(fields: [authorId], references: [user_id])
  parent     Comment?  @relation("comment_children", fields: [parentId], references: [comment_id])
  children   Comment[] @relation("comment_children")
  post       Post      @relation(fields: [postId], references: [post_id])
}

model Message {
  message_id String    @id @default(cuid())
  body       String    @db.VarChar(300)
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  messageId  String
  ReceiverId String
  message    User      @relation(fields: [messageId], references: [user_id])
}

enum type {
  Learning
  Question
  Blog
}

enum level {
  Beginner
  Advanced
  Expert
  Master
}
